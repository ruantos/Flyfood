##########################################################################################################################################################################
#                                                                                                                                                                        #
#                                               Explicações das funções usando os conceitos dos ACO:                                                                     #
#                                                                                                                                                                        #
##########################################################################################################################################################################


Antes de tudo, a sigla ACO, ou Algoritmo de Otimização por Colônia de Formigas (do inglês, Ant Colony Optimization), é uma técnica de otimização baseada na simulação do comportamento das formigas, onde as formigas virtuais colaboram para encontrar soluções de alta qualidade em um espaço de busca complexo. É particularmente útil para problemas onde a busca exaustiva de todas as soluções é impraticável, e sua inspiração na natureza o torna uma abordagem interessante e eficaz para resolver uma ampla gama de problemas de otimização.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|                                                          Função Classe Formiga                                                                                       |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    1. **Inicialização da Formiga**:
      - Quando uma instância da classe `Formiga` é criada, ela recebe uma cidade inicial e o número total de cidades como parâmetros.
      - A cidade atual da formiga é definida como a cidade inicial.
      - É criado um conjunto chamado `cidades_nao_visitadas` que contém todas as cidades, exceto a cidade inicial.
      - A rota inicial da formiga contém apenas a cidade inicial.

    **Método `selecionar_proxima_cidade`:**
    1. **Seleção da Próxima Cidade**:
      - Este método é responsável por escolher a próxima cidade que a formiga visitará com base em probabilidades calculadas a partir do feromônio (rastro deixado por outras formigas) e da distância entre as cidades.
      - Inicialmente, é criada uma lista `probabilidade` com zeros para armazenar as probabilidades de escolher cada cidade não visitada.
      - A variável `total_probabilidade` é inicializada para somar todas as probabilidades calculadas.

    2. **Cálculo de Probabilidades**:
      - O método itera sobre as cidades não visitadas e calcula a probabilidade de escolher cada uma delas.
      - A probabilidade é calculada usando a fórmula `(feromonio[self.cidade_atual][cidade] ** alfa) * (1.0 / distEuclidiana(cidades[self.cidade_atual], cidades[cidade]) ** beta)`, onde `feromonio` é a matriz de feromônio, `alfa` e `beta` são parâmetros de ajuste.
      - A probabilidade de cada cidade é adicionada à lista `probabilidade`, e a `total_probabilidade` é atualizada somando todas as probabilidades.


    *****************************************************************************************************************************
    *                                    CoPor que o alfa e o beta tem essa taxa?                                               *
    *****************************************************************************************************************************


        Na teoria do Algoritmo de Otimização por Colônia de Formigas (ACO), os parâmetros alfa e beta são usados para ajustar a importância relativa do feromônio e da informação heurística (distância) na decisão de escolher a próxima cidade.

            1. **Parâmetro Alfa (α):**
              - O parâmetro alfa controla a influência do feromônio nas escolhas das formigas. Quando alfa é alto (e.g., alfa = 1.0), isso significa que o feromônio tem uma influência forte e as formigas têm maior probabilidade de seguir caminhos com feromônio mais forte, mesmo que sejam mais longos em termos de distância.
              - Quando alfa é baixo (e.g., alfa = 0.1), a influência do feromônio é menor, e as formigas tendem a explorar mais o espaço de busca, escolhendo rotas mais curtas em termos de distância, mas com feromônio menor.

            2. **Parâmetro Beta (β):**
              - O parâmetro beta controla a influência da informação heurística (distância) nas escolhas das formigas. Quando beta é alto (e.g., beta = 1.0), a distância tem uma influência forte, e as formigas tendem a escolher caminhos mais curtos em termos de distância.
              - Quando beta é baixo (e.g., beta = 0.1), a influência da distância é menor, e as formigas podem escolher caminhos mais longos em termos de distância, mas com feromônio mais forte.

            Então, em relação à sua pergunta sobre se alfa e beta são sempre definidos como 1.0, a resposta é que esses valores podem variar dependendo do problema específico e da estratégia desejada. Um valor comum é usar alfa = beta = 1.0 como ponto de partida, mas é comum ajustar esses parâmetros durante a otimização para encontrar o equilíbrio certo entre explorar (valores baixos) e explorar (valores altos) o espaço de busca.

          Em resumo, o ajuste de alfa e beta é uma parte crucial do ACO, permitindo que o algoritmo se adapte ao problema e às preferências do usuário. Valores diferentes de alfa e beta podem levar a soluções diferentes em termos de exploração e exploração do espaço de busca.

    3. **Normalização de Probabilidades**:
      - As probabilidades calculadas precisam ser normalizadas para que somem 1.0, tornando-as uma distribuição de probabilidade válida.
      - O método divide cada probabilidade na lista `probabilidade` pela `total_probabilidade`, resultando em uma lista de probabilidades normalizadas.

    4. **Escolha Aleatória da Próxima Cidade**:
      - Uma escolha aleatória é feita com base nas probabilidades normalizadas.
      - O método gera um número aleatório `escolha` entre 0 e 1 e itera sobre a lista de probabilidades normalizadas para encontrar a próxima cidade.
      - A próxima cidade é escolhida quando a soma acumulativa das probabilidades normalizadas atinge ou excede o valor da escolha aleatória.
      - A cidade escolhida é removida da lista de cidades não visitadas e adicionada à rota da formiga.

    No geral, esta classe e o método implementam o comportamento de uma formiga que seleciona a próxima cidade a ser visitada com base nas probabilidades derivadas do feromônio depositado pelas formigas anteriores e da distância entre as cidades. 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|                                                          Função distEuclidiana                                                                                       |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    Cálculo da Distância Euclidiana:
    Esta função calcula a distância euclidiana entre duas cidades com base em suas coordenadas.
    É uma medida de distância comum que mede a distância entre dois pontos no espaço bidimensional (geralmente, um plano cartesiano).
    Ela recebe dois parâmetros cidade1 e cidade2, que são as coordenadas das duas cidades (geralmente representadas como pares de coordenadas x, y).
    Cálculo da Distância:
    A função utiliza a fórmula da distância euclidiana, que é a raiz quadrada da soma dos quadrados das diferenças das coordenadas x e y das duas cidades.
    A fórmula é: ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5, onde x1, y1 são as coordenadas da primeira cidade, e x2, y2 são as coordenadas da segunda cidade.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|                                                          Função calcular_distancia_rota                                                                              |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    Cálculo da Distância Total de uma Rota:

    Esta função calcula a distância total percorrida em uma rota, que é uma sequência de cidades. Ela soma as distâncias entre todas as cidades consecutivas na rota.
    Iteração pela Rota:

    A função itera pela lista rota, que contém a ordem em que as cidades são visitadas.
    Para cada cidade na rota, ela calcula a distância entre a cidade atual e a seguinte.
    A distância entre duas cidades é calculada chamando a função distEuclidiana com as coordenadas das duas cidades.
    Soma das Distâncias:

    A função acumula as distâncias entre todas as cidades consecutivas na variável distancia_total.
    Tratamento de Rota Circular:

    Como a rota é uma lista cíclica, a função assegura que a distância seja calculada corretamente ao tratar o caso da última cidade conectando-se de volta à primeira cidade.
    Isso é feito usando (i + 1) % len(rota), onde i é o índice da cidade atual, e len(rota) é o número total de cidades na rota.
     
    *****************************************************************************************************************************
    *                                    Contexto geral dessa duas funções                                                      *
    *****************************************************************************************************************************

  No geral, essas duas funções são usadas para calcular as distâncias entre as cidades com base em suas coordenadas e calcular a distância total percorrida em uma rota específica. Isso é fundamental para avaliar o desempenho das rotas geradas pelo algoritmo de Otimização por Colônia de Formigas (ACO) e escolher a melhor rota encontrada.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|                                                                     Função construir_trilha                                                                          |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    1. **Inicialização de Parâmetros e Variáveis**:
      - A função recebe como entrada uma lista de coordenadas de cidades, o número de formigas, o número de gerações, e outros parâmetros como alfa (importância do feromônio) e beta (importância da distância).
      - Ela cria uma matriz chamada `feromonio` para armazenar os níveis de feromônio entre as cidades. Inicialmente, todos os valores são definidos como 1.0 (valor inicial arbitrário).

    2. **Inicialização das Variáveis de Controle**:
      - `melhor_rota_global` é definido como `None` para armazenar a melhor rota encontrada.
      - `melhor_distancia_global` é definido como infinito para representar que ainda não encontramos uma rota melhor.
      - `melhor_distancia_por_geracao` é uma lista vazia que será usada para acompanhar a evolução da melhor distância em cada geração.
      - `geracoes_sem_melhoria` é inicializado como 0 e será usado para rastrear quantas gerações não houve melhoria na rota.

    3. **Laço de Gerações**:
      - O código entra em um laço que itera pelas gerações definidas (`num_geracoes`).
      - Para cada geração, a função começa com a inicialização de variáveis locais para a melhor rota (`melhor_rota_local`) e a melhor distância (`melhor_distancia_local`) encontradas naquela geração.

    4. **Laço de Formigas**:
      - Dentro de cada geração, há outro laço que itera pelo número de formigas (`num_formigas`).
      - Para cada formiga, é escolhida aleatoriamente uma cidade inicial.
      - Em seguida, a formiga percorre as cidades usando o método `selecionar_proxima_cidade`. Este método calcula as probabilidades de escolher a próxima cidade com base nos níveis de feromônio e na distância entre as cidades (alfa e beta são usados para ajustar o equilíbrio entre esses fatores).


    5. **Atualização da Melhor Rota Local**:
      - Após uma formiga completar seu percurso, a função verifica se a distância percorrida é menor do que a melhor distância encontrada até agora naquela geração (`melhor_distancia_local`). Se for, atualiza a melhor rota local e a melhor distância local.

    6. **Atualização da Melhor Rota Global**:
      - A função compara a melhor distância local com a melhor distância global. Se a melhor distância local for menor, significa que encontramos uma nova melhor rota global, então ela é atualizada. Além disso, o contador `geracoes_sem_melhoria` é redefinido para 0.

    7. **Acompanhamento da Melhor Distância**:
      - A melhor distância global de cada geração é adicionada à lista `melhor_distancia_por_geracao` para fins de acompanhamento e visualização.

    8. **Acompanhamento das Elites**:
      - A função também mantém uma lista de elites (rotas de formigas que alcançaram as melhores distâncias locais). As elites são armazenadas na lista `elites`.
      - Elas são usadas para atualizar o feromônio apenas nas cidades visitadas pelas elites, promovendo caminhos que levam a melhores soluções.
      - A quantidade de feromônio deixada pelas elites é inversamente proporcional à distância percorrida.

    9. **Retorno de Resultados**:
      - No final de todas as gerações, a função retorna a melhor rota global encontrada, a melhor distância global e a lista de melhores distâncias por geração.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|                                                                             Função main                                                                              |
------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    1. **Leitura das Coordenadas das Cidades**:
      - A função inicia lendo as coordenadas das cidades de um arquivo. Essas coordenadas representam a localização geográfica das cidades.

    2. **Definição de Parâmetros**:
      - Neste ponto, são definidos vários parâmetros que afetam o funcionamento do algoritmo ACO, como o número de formigas, o número de gerações, os valores alfa, beta e a taxa de evaporização do feromônio.
      - Esses parâmetros controlam o comportamento das formigas e a evolução do algoritmo.

    3. **Marcação do Tempo Inicial**:
      - A função registra o tempo de início da execução do algoritmo.

    4. **Chamada da Função `construir_trilha`**:
      - A função principal chama a função `construir_trilha` com os parâmetros definidos para encontrar a melhor rota através das cidades. Esta é a parte central do algoritmo ACO, onde as formigas exploram e otimizam as rotas.

    5. **Marcação do Tempo Final**:
      - Após a execução da função `construir_trilha`, a função principal registra o tempo de término da execução.

    6. **Impressão dos Resultados**:
      - Os resultados do algoritmo são impressos, incluindo:
        - A melhor rota encontrada.
        - A melhor distância encontrada (que é a distância total percorrida na melhor rota).
        - O tempo de execução do algoritmo em segundos.

    7. **Geração de Gráficos**:
      - A função gera dois gráficos para visualização dos resultados:
        - Gráfico 1: Exibe a melhor rota encontrada, onde as cidades são representadas por pontos conectados na ordem da rota.
        - Gráfico 2: Exibe a evolução da melhor distância ao longo das gerações. O eixo x representa as gerações e o eixo y representa a distância.

  O objetivo desta função é orquestrar a execução do algoritmo ACO, fornecendo os parâmetros, coletando os resultados e visualizando-os em gráficos para análise. Isso ajuda a encontrar uma solução aproximadamente ótima para o problema do caixeiro-viajante, onde o objetivo é encontrar a rota mais curta que visita todas as cidades uma vez e retorna à cidade inicial.